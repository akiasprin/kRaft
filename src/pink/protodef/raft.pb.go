// Code generated by protoc-gen-go. DO NOT EDIT.
// source: raft.proto

/*
Package protodef is a generated protocol buffer package.

It is generated from these files:
	raft.proto

It has these top-level messages:
	VoteRequest
	VoteResponse
	LogEntry
	AppendEntriesRequest
	AppendEntriesResponse
*/
package protodef

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type VoteRequest struct {
	Term         uint64 `protobuf:"varint,1,opt,name=Term" json:"Term,omitempty"`
	CandidateID  int32  `protobuf:"varint,2,opt,name=CandidateID" json:"CandidateID,omitempty"`
	LastLogIndex uint64 `protobuf:"varint,3,opt,name=LastLogIndex" json:"LastLogIndex,omitempty"`
	LastLogTerm  uint64 `protobuf:"varint,4,opt,name=LastLogTerm" json:"LastLogTerm,omitempty"`
}

func (m *VoteRequest) Reset()                    { *m = VoteRequest{} }
func (m *VoteRequest) String() string            { return proto.CompactTextString(m) }
func (*VoteRequest) ProtoMessage()               {}
func (*VoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *VoteRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *VoteRequest) GetCandidateID() int32 {
	if m != nil {
		return m.CandidateID
	}
	return 0
}

func (m *VoteRequest) GetLastLogIndex() uint64 {
	if m != nil {
		return m.LastLogIndex
	}
	return 0
}

func (m *VoteRequest) GetLastLogTerm() uint64 {
	if m != nil {
		return m.LastLogTerm
	}
	return 0
}

type VoteResponse struct {
	Term        uint64 `protobuf:"varint,1,opt,name=Term" json:"Term,omitempty"`
	VoteGranted bool   `protobuf:"varint,2,opt,name=VoteGranted" json:"VoteGranted,omitempty"`
}

func (m *VoteResponse) Reset()                    { *m = VoteResponse{} }
func (m *VoteResponse) String() string            { return proto.CompactTextString(m) }
func (*VoteResponse) ProtoMessage()               {}
func (*VoteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *VoteResponse) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *VoteResponse) GetVoteGranted() bool {
	if m != nil {
		return m.VoteGranted
	}
	return false
}

type LogEntry struct {
	Term    uint64 `protobuf:"varint,1,opt,name=Term" json:"Term,omitempty"`
	Index   uint64 `protobuf:"varint,2,opt,name=Index" json:"Index,omitempty"`
	Command []byte `protobuf:"bytes,3,opt,name=Command,proto3" json:"Command,omitempty"`
}

func (m *LogEntry) Reset()                    { *m = LogEntry{} }
func (m *LogEntry) String() string            { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()               {}
func (*LogEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LogEntry) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *LogEntry) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *LogEntry) GetCommand() []byte {
	if m != nil {
		return m.Command
	}
	return nil
}

type AppendEntriesRequest struct {
	Term         uint64      `protobuf:"varint,1,opt,name=Term" json:"Term,omitempty"`
	LeaderID     int32       `protobuf:"varint,2,opt,name=LeaderID" json:"LeaderID,omitempty"`
	LeaderCommit uint64      `protobuf:"varint,3,opt,name=LeaderCommit" json:"LeaderCommit,omitempty"`
	PrevLogIndex uint64      `protobuf:"varint,4,opt,name=PrevLogIndex" json:"PrevLogIndex,omitempty"`
	PrevLogTerm  uint64      `protobuf:"varint,5,opt,name=PrevLogTerm" json:"PrevLogTerm,omitempty"`
	Entries      []*LogEntry `protobuf:"bytes,6,rep,name=Entries" json:"Entries,omitempty"`
}

func (m *AppendEntriesRequest) Reset()                    { *m = AppendEntriesRequest{} }
func (m *AppendEntriesRequest) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesRequest) ProtoMessage()               {}
func (*AppendEntriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AppendEntriesRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesRequest) GetLeaderID() int32 {
	if m != nil {
		return m.LeaderID
	}
	return 0
}

func (m *AppendEntriesRequest) GetLeaderCommit() uint64 {
	if m != nil {
		return m.LeaderCommit
	}
	return 0
}

func (m *AppendEntriesRequest) GetPrevLogIndex() uint64 {
	if m != nil {
		return m.PrevLogIndex
	}
	return 0
}

func (m *AppendEntriesRequest) GetPrevLogTerm() uint64 {
	if m != nil {
		return m.PrevLogTerm
	}
	return 0
}

func (m *AppendEntriesRequest) GetEntries() []*LogEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type AppendEntriesResponse struct {
	Term        uint64 `protobuf:"varint,1,opt,name=Term" json:"Term,omitempty"`
	NextIndex   uint64 `protobuf:"varint,2,opt,name=NextIndex" json:"NextIndex,omitempty"`
	CommitIndex uint64 `protobuf:"varint,3,opt,name=CommitIndex" json:"CommitIndex,omitempty"`
	Success     bool   `protobuf:"varint,4,opt,name=Success" json:"Success,omitempty"`
}

func (m *AppendEntriesResponse) Reset()                    { *m = AppendEntriesResponse{} }
func (m *AppendEntriesResponse) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesResponse) ProtoMessage()               {}
func (*AppendEntriesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AppendEntriesResponse) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesResponse) GetNextIndex() uint64 {
	if m != nil {
		return m.NextIndex
	}
	return 0
}

func (m *AppendEntriesResponse) GetCommitIndex() uint64 {
	if m != nil {
		return m.CommitIndex
	}
	return 0
}

func (m *AppendEntriesResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*VoteRequest)(nil), "protodef.VoteRequest")
	proto.RegisterType((*VoteResponse)(nil), "protodef.VoteResponse")
	proto.RegisterType((*LogEntry)(nil), "protodef.LogEntry")
	proto.RegisterType((*AppendEntriesRequest)(nil), "protodef.AppendEntriesRequest")
	proto.RegisterType((*AppendEntriesResponse)(nil), "protodef.AppendEntriesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Raft service

type RaftClient interface {
	RequestVote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error)
}

type raftClient struct {
	cc *grpc.ClientConn
}

func NewRaftClient(cc *grpc.ClientConn) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) RequestVote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/protodef.Raft/RequestVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error) {
	out := new(AppendEntriesResponse)
	err := grpc.Invoke(ctx, "/protodef.Raft/AppendEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Raft service

type RaftServer interface {
	RequestVote(context.Context, *VoteRequest) (*VoteResponse, error)
	AppendEntries(context.Context, *AppendEntriesRequest) (*AppendEntriesResponse, error)
}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

func _Raft_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodef.Raft/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).RequestVote(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodef.Raft/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).AppendEntries(ctx, req.(*AppendEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protodef.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestVote",
			Handler:    _Raft_RequestVote_Handler,
		},
		{
			MethodName: "AppendEntries",
			Handler:    _Raft_AppendEntries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}

func init() { proto.RegisterFile("raft.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcf, 0x4e, 0xc2, 0x40,
	0x10, 0xc6, 0x2d, 0x14, 0xa8, 0x53, 0xbc, 0x6c, 0xc0, 0x34, 0xc4, 0x68, 0xd3, 0x13, 0x07, 0xc3,
	0x01, 0xef, 0x26, 0x06, 0x8c, 0x21, 0x69, 0x88, 0x59, 0x8d, 0xf7, 0x95, 0x1d, 0x08, 0x07, 0xda,
	0xda, 0x2e, 0x06, 0x1f, 0xc0, 0x83, 0xaf, 0xe0, 0xc3, 0xf9, 0x2c, 0x66, 0xa7, 0x7f, 0x58, 0x08,
	0x70, 0x62, 0xe7, 0xe3, 0xeb, 0xec, 0x37, 0xbf, 0x59, 0x80, 0x54, 0xcc, 0xd5, 0x20, 0x49, 0x63,
	0x15, 0x33, 0x87, 0x7e, 0x24, 0xce, 0x83, 0x1f, 0x0b, 0xdc, 0xb7, 0x58, 0x21, 0xc7, 0x8f, 0x35,
	0x66, 0x8a, 0x31, 0xb0, 0x5f, 0x31, 0x5d, 0x79, 0x96, 0x6f, 0xf5, 0x6d, 0x4e, 0x67, 0xe6, 0x83,
	0x3b, 0x12, 0x91, 0x5c, 0x4a, 0xa1, 0x70, 0x32, 0xf6, 0x6a, 0xbe, 0xd5, 0x6f, 0x70, 0x53, 0x62,
	0x01, 0xb4, 0x43, 0x91, 0xa9, 0x30, 0x5e, 0x4c, 0x22, 0x89, 0x1b, 0xaf, 0x4e, 0x5f, 0xef, 0x68,
	0xba, 0x4b, 0x51, 0xd3, 0x05, 0x36, 0x59, 0x4c, 0x29, 0x18, 0x43, 0x3b, 0x8f, 0x92, 0x25, 0x71,
	0x94, 0xe1, 0xb1, 0x2c, 0xda, 0xf3, 0x94, 0x8a, 0x48, 0xa1, 0xa4, 0x2c, 0x0e, 0x37, 0xa5, 0x60,
	0x0a, 0x4e, 0x18, 0x2f, 0x1e, 0x23, 0x95, 0x7e, 0x1d, 0xec, 0xd0, 0x81, 0x46, 0x1e, 0xb2, 0x46,
	0x62, 0x5e, 0x30, 0x0f, 0x5a, 0xa3, 0x78, 0xb5, 0x12, 0x91, 0xa4, 0xf0, 0x6d, 0x5e, 0x96, 0xc1,
	0x9f, 0x05, 0x9d, 0x87, 0x24, 0xc1, 0x48, 0xea, 0x9e, 0x4b, 0xcc, 0x4e, 0xa1, 0xea, 0x81, 0x13,
	0xa2, 0x90, 0x98, 0x56, 0x9c, 0xaa, 0x9a, 0x20, 0xd1, 0x59, 0x77, 0x5e, 0xaa, 0x0a, 0x92, 0xa1,
	0x69, 0xcf, 0x73, 0x8a, 0x9f, 0x15, 0xc8, 0x9c, 0xd2, 0x8e, 0xa6, 0x11, 0x14, 0x35, 0x5d, 0xdf,
	0xc8, 0x41, 0x1a, 0x12, 0xbb, 0x85, 0x56, 0x91, 0xd5, 0x6b, 0xfa, 0xf5, 0xbe, 0x3b, 0x64, 0x83,
	0x72, 0xe1, 0x83, 0x92, 0x0d, 0x2f, 0x2d, 0xc1, 0xb7, 0x05, 0xdd, 0xbd, 0x01, 0x4f, 0x2c, 0xe0,
	0x0a, 0xce, 0xa7, 0xb8, 0x51, 0x26, 0xc2, 0xad, 0x40, 0x4f, 0x85, 0x26, 0x31, 0xdf, 0x81, 0x29,
	0x69, 0xd0, 0x2f, 0xeb, 0xd9, 0x0c, 0xb3, 0x8c, 0x86, 0x73, 0x78, 0x59, 0x0e, 0x7f, 0x2d, 0xb0,
	0xb9, 0x98, 0x2b, 0x76, 0x0f, 0x6e, 0xc1, 0x58, 0xef, 0x95, 0x75, 0xb7, 0xe1, 0x8d, 0x97, 0xda,
	0xbb, 0xdc, 0x97, 0xf3, 0xd0, 0xc1, 0x19, 0xe3, 0x70, 0xb1, 0x33, 0x0f, 0xbb, 0xde, 0x5a, 0x0f,
	0x6d, 0xb2, 0x77, 0x73, 0xf4, 0xff, 0xb2, 0xe7, 0x7b, 0x93, 0x1c, 0x77, 0xff, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xf9, 0x11, 0x8b, 0x1d, 0x46, 0x03, 0x00, 0x00,
}
